pipeline:
  name: payment-service
  identifier: paymentserviceweb
  projectIdentifier: DevX_Demo
  orgIdentifier: default
  description: Gartner Demo
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: nikpwingssoftware
        repoName: payment-service
        build: <+input>
        prCloneStrategy: MergeCommit
  stages:
    - stage:
        name: Build
        identifier: Build
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: nikpgkecluster
              namespace: payment-service-build
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: RestoreCacheS3
                  name: RestoreCache
                  identifier: RestoreCache
                  spec:
                    connectorRef: nikpaws
                    region: eu-west-2
                    bucket: nikp-maven
                    key: payment-service-ci
                    archiveFormat: Tar
                    resources:
                      limits:
                        memory: 512Mi
                        cpu: "0.5"
              - parallel:
                  - step:
                      type: RunTests
                      name: runTestsWithIntelligence
                      identifier: runTestsWithIntelligence
                      spec:
                        connectorRef: devxgcp
                        image: europe-west1-docker.pkg.dev/sales-209522/devx-demo/maven:<+pipeline.variables.mavenversion>-jdk-<+pipeline.variables.javaversion>
                        language: Java
                        buildTool: Maven
                        args: clean test
                        packages: com.nikp.
                        runOnlySelectedTests: true
                        preCommand: |-
                          #ET-SETUP-BEGIN
                          PROJ_DIR=$PWD
                          cd /opt
                          arch=`uname -m`
                          if [ $arch = "x86_64" ]; then
                            if cat /etc/os-release | grep -iq alpine ; then
                              wget -qO- https://get.et.harness.io/releases/latest/alpine/harness-et-agent.tar.gz | tar -xz
                            else
                              wget -qO- https://get.et.harness.io/releases/latest/nix/harness-et-agent.tar.gz | tar -xz
                            fi
                          elif [ $arch = "aarch64" ]; then
                            wget -qO- https://get.et.harness.io/releases/latest/arm/harness-et-agent.tar.gz | tar -xz
                          fi
                          export ET_COLLECTOR_URL=https://app.harness.io/gratis/et-collector
                          export ET_APPLICATION_NAME=$HARNESS_PIPELINE_ID
                          export ET_ENV_ID=_INTERNAL_ET_CI
                          export ET_DEPLOYMENT_NAME=$HARNESS_BUILD_ID
                          export ET_ACCOUNT_ID=$HARNESS_ACCOUNT_ID
                          export ET_ORG_ID=$HARNESS_ORG_ID
                          export ET_PROJECT_ID=$HARNESS_PROJECT_ID
                          # export ET_SHUTDOWN_GRACETIME=30000
                          export JAVA_TOOL_OPTIONS="-agentpath:/opt/harness/lib/libETAgent.so"
                          # Uncomment the line below if using Java version 10 or above
                          # export JAVA_TOOL_OPTIONS="-Xshare:off -XX:-UseTypeSpeculation -XX:ReservedCodeCacheSize=512m -agentpath:/opt/harness/lib/libETAgent.so"
                          cd $PROJ_DIR
                          #ET-SETUP-END
                          cd payment-service
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/*.xml"
                        envVariables:
                          DRONE_COMMIT_SHA: any
                          DRONE_REMOTE_URL: any
                          DRONE_SOURCE_BRANCH: any
                          DRONE_TARGET_BRANCH: any
                          MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                          CONTAINER_STEP: "3"
                        resources:
                          limits:
                            memory: 6Gi
                            cpu: "6"
                        enableTestSplitting: false
                      description: aderasdsad
                  - step:
                      type: Plugin
                      name: cleanup
                      identifier: cleanup
                      spec:
                        connectorRef: nikpdockerhub
                        image: nikpap/githubcli:v2
                        privileged: false
                        settings:
                          GITHUB_TOKEN: <+secrets.getValue("githubtoken")>
                          GITHUB_USERNAME: nikpapag
                          GITHUB_EMAIL: nikpap.cs@icloud.com
                        imagePullPolicy: Always
                        resources:
                          limits:
                            memory: 3Gi
                      failureStrategies:
                        - onFailure:
                            errors:
                              - Unknown
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+trigger.branch> != "master-1"
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    connectorRef: nikpdockerhub
                    image: maven:<+pipeline.variables.mavenversion>-jdk-<+pipeline.variables.javaversion>
                    shell: Sh
                    command: |-
                      cd payment-service
                      mvn -Dmaven.test.skip=true clean install -X
                    privileged: false
                    envVariables:
                      MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                    resources:
                      limits:
                        memory: 3Gi
                        cpu: "2"
                  description: This builds payment service even better. And now with style!sad
              - step:
                  type: SaveCacheS3
                  name: Savemavenrepo
                  identifier: Savemavenrepo
                  spec:
                    connectorRef: nikpaws
                    region: eu-west-2
                    bucket: nikp-maven
                    key: payment-service-ci
                    sourcePaths:
                      - ./maven/repository
                    archiveFormat: Tar
                    override: true
                    resources:
                      limits:
                        memory: 512Mi
                        cpu: "0.5"
              - step:
                  type: BuildAndPushDockerRegistry
                  name: pushToDockerHub
                  identifier: pushToDockerHub
                  spec:
                    connectorRef: nikpdockerhub
                    repo: nikpap/payment-service
                    tags:
                      - <+pipeline.sequenceId>
                    dockerfile: /harness/payment-service/Dockerfile
                    optimize: true
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "4"
          serviceConfig:
            serviceRef: ""
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          sharedPaths:
            - /var/run
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: nikpdockerhub
                image: docker:dind
                privileged: true
                entrypoint:
                  - dockerd-entrypoint.sh
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 500Mi
                    cpu: 300m
          slsa_provenance:
            enabled: true
            attestation:
              type: cosign
              spec:
                password: sscapassword
                private_key: sscaprivatekey
          caching:
            enabled: false
            paths: []
        when:
          pipelineStatus: Success
        variables:
          - name: sto_api_key
            type: Secret
            value: STOJWT
          - name: runner_registry_username
            type: Secret
            value: ZN_Docker_Student_Username
          - name: runner_registry_token
            type: Secret
            value: zeronorthpass
          - name: runner_tag
            type: String
            value: dev
          - name: api_domain_name
            type: String
            value: https://api.sto.harness.io
        description: ""
    - stage:
        name: DeployDev
        identifier: DeployDev
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: paymentservice
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: GKEDEV
            deployToAll: false
            infrastructureDefinitions:
              - identifier: K8s_Dev_Namespace
          execution:
            steps:
              - step:
                  type: JiraCreate
                  name: JiraCreate
                  identifier: JiraCreate
                  spec:
                    connectorRef: account.Harness_JIRA
                    projectKey: HD
                    issueType: Story
                    fields:
                      - name: Summary
                        value: Ticket to track deployment of <+pipeline.variables.servicename> triggered by <+pipeline.variables.seusername>
                      - name: Description
                        value: "triggeredBy: <+pipeline.variables.seusername> buildNumber: <+pipeline.sequenceId>"
                  timeout: 1d
              - step:
                  name: Rollout Deployment12
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
              - step:
                  type: Chaos
                  name: chaos
                  identifier: chaos
                  spec:
                    experimentRef: 0daffb0a-a801-48c7-a152-266c7c2fbe5e
                    expectedResilienceScore: 50
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.chaosexperiments> == 'true'
              - step:
                  type: JiraUpdate
                  name: JiraUpdate
                  identifier: JiraUpdate
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.DeployDev.spec.execution.steps.JiraCreate.issue.id>
                    transitionTo:
                      transitionName: In Progress
                      status: In Progress
                    fields:
                      - name: Description
                        value: "Chaos resiliency: <+execution.steps.chaos.status>"
                  timeout: 1d
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
        delegateSelectors:
          - devx-demo-delegate
    - stage:
        name: Jira Approve
        identifier: Jira_Approve
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: Jira Approval1
                  identifier: jiraApproval
                  type: JiraApproval
                  timeout: 1d
                  spec:
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: Status
                            operator: equals
                            value: Approved
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: false
                        conditions:
                          - key: Status
                            operator: equals
                            value: Rejected
                    connectorRef: account.Harness_JIRA
                    projectKey: HD
                    issueKey: <+pipeline.stages.DeployDev.spec.execution.steps.JiraCreate.issue.key>
            rollbackSteps: []
          serviceDependencies: []
        tags: {}
        when:
          pipelineStatus: Success
    - stage:
        name: DeployProd
        identifier: DeployProd
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: GKEPROD
            deployToAll: false
            infrastructureDefinitions:
              - identifier: K8s_Prod_Namespace
          execution:
            steps:
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        name: Canary Deployment
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            type: Count
                            spec:
                              count: 1
                          skipDryRun: false
                    - parallel:
                        - step:
                            type: Verify
                            name: verify_canary
                            identifier: verify_dev
                            spec:
                              type: Canary
                              spec:
                                sensitivity: LOW
                                duration: 5m
                                deploymentTag: <+serviceConfig.artifacts.primary.tag>
                            timeout: 2h
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - Verification
                                  action:
                                    type: ManualIntervention
                                    spec:
                                      timeout: 2h
                                      onTimeout:
                                        action:
                                          type: StageRollback
                              - onFailure:
                                  errors:
                                    - Unknown
                                  action:
                                    type: ManualIntervention
                                    spec:
                                      timeout: 2h
                                      onTimeout:
                                        action:
                                          type: Ignore
                            when:
                              stageStatus: Success
                              condition: <+pipeline.variables.verify_fail> == "false"
                        - step:
                            type: ShellScript
                            name: Smoke Tests
                            identifier: Smoke_Tests
                            spec:
                              shell: Bash
                              executionTarget: {}
                              source:
                                type: Inline
                                spec:
                                  script: echo "Executing smoke tests"
                              environmentVariables: []
                              outputVariables: []
                            timeout: 10m
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
                  rollbackSteps:
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Primary Deployment
                  identifier: primaryDepoyment
                  steps:
                    - step:
                        name: Rolling Deployment
                        identifier: rollingDeployment
                        type: K8sRollingDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
                  rollbackSteps:
                    - step:
                        name: Rolling Rollback
                        identifier: rollingRollback
                        type: K8sRollingRollback
                        timeout: 10m
                        spec: {}
              - step:
                  type: ShellScript
                  name: WrapUp
                  identifier: WrapUp
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "Wrapping up deployment"
                          url="http://$subdomain.cie-demo.co.uk"
                          export application="$url"
                    environmentVariables:
                      - name: subdomain
                        type: String
                        value: <+pipeline.variables.seusername>
                    outputVariables:
                      - name: application
                        type: String
                        value: application
                    executionTarget: {}
                  timeout: 10m
              - step:
                  type: JiraUpdate
                  name: JiraUpdate
                  identifier: JiraUpdate
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.DeployDev.spec.execution.steps.JiraCreate.issue.key>
                    transitionTo:
                      transitionName: Done
                      status: Done
                    fields: []
                  timeout: 1d
              - step:
                  type: K8sApply
                  name: Autostopping
                  identifier: Autostopping
                  spec:
                    filePaths:
                      - autostopping/ccm-autostoppingrule.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
                  timeout: 10m
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.autostopping> == "true"
                  failureStrategies: []
            rollbackSteps:
              - step:
                  type: K8sCanaryDelete
                  name: Canary Rollback
                  identifier: Canary_Rollback
                  spec:
                    skipDryRun: false
                  timeout: 10m
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
        delegateSelectors:
          - devx-demo-delegate
    - stage:
        name: Go To Market
        identifier: Go_To_Market
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: approve
                  identifier: approve
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - _project_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
    - stage:
        name: Feature Flags
        identifier: Feature_Flags
        description: ""
        type: FeatureFlag
        spec:
          execution:
            steps:
              - step:
                  type: FlagConfiguration
                  name: FlagConfiguration_1
                  identifier: FlagConfiguration_1
                  spec:
                    feature: bankvalidation
                    environment: GKEPROD
                    instructions:
                      - identifier: SetOnVariationIdentifier
                        type: SetOnVariation
                        spec:
                          variation: "true"
                      - identifier: AddTargetsToVariationTargetMapIdentifier
                        type: AddTargetsToVariationTargetMap
                        spec:
                          variation: "true"
                          targets:
                            - harness-olirees
                  timeout: 10m
  variables:
    - name: mavenversion
      type: String
      default: "3.8"
      value: <+input>
    - name: javaversion
      type: String
      default: "8"
      value: <+input>
    - name: servicename
      type: String
      default: payment-service
      value: payment-service
    - name: seusername
      type: String
      value: <+input>
    - name: ffsdkkeyprod
      type: String
      default: 44c9dcaa-dab2-4100-b2b5-75bdeb7aa497
      value: <+secrets.getValue("ffsdkprod")>
    - name: isingress
      type: Number
      default: 1
      value: 1
    - name: verify_fail
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: run_owasp_scan
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: dbuser
      type: Secret
      value: dbuser
    - name: dbpassword
      type: Secret
      value: dbpassword
    - name: verify_fail2
      type: String
      value: test
    - name: autostopping
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: hosted
      type: String
      description: ""
      value: <+input>.allowedValues(true,false)
    - name: chaosexperiments
      type: String
      description: ""
      required: false
      value: <+input>.default(false).allowedValues(true,false)
  flowControl:
    barriers:
      - name: Barrier
        identifier: Barrier
  allowStageExecutions: true
